{
	"name": "CdrInput",
	"versions": [
		{
			"readme": "# <span class=\"display-name\">CdrInput</span>\n\n**NOTE:** `v-model` is required.\n\n",
			"examples": "### Examples\n\n#### Single line with feedback icons, error messages, and a debounced validation rule\n\n```\n// Stuff for demo\nvar debounce = '';\nfunction validateFn(inputText) {\n  var obj = {};\n  if (inputText === 'hi') {\n    obj.state = 'valid';\n  } else if (inputText === '') {\n    obj.state = 'warn';\n    obj.message = 'Warning Empty';\n  } else if (!isNaN(inputText) && inputText !== '') {\n    obj.state = 'error';\n    obj.message = 'Error: needs to be letters';\n  } else {\n    obj.state = 'error';\n    obj.message = 'Error Message';\n  }\n  return obj;\n}\n\n//Component usages\n<cdr-input v-model=\"debounce\"\n  label=\"Enter hi\"\n  id=\"testing\"\n  placeholder=\"Enter hi\"\n  feedback\n  :rules=\"[validateFn]\"\n  debounce\n  data-backstop=\"text-input\"\n  ></cdr-input>\n```\n\n#### Normal multiline input\n\n```\nvar multi = '';\n\n<cdr-input v-model=\"multi\"\n      label=\"Multiline\"\n      multi-line\n      ></cdr-input>\n```\n",
			"tmplTblData": "### <button class='title'>PROPS, METHODS, EVENTS, SLOTS</button>\n\nProp Name | Type | Default | Require | Description\n--- | --- | --- | --- | ---\nid | string | n/a | false | `id` for the input that is mapped to the label `for` attribute. If one is not provided, it will be auto generated.\nlabel | string | n/a | true | Label text. This is required for a11y even if hiding the label with `hideLabel`.\nhideLabel | boolean | n/a | false | Removes the label element but sets the input `aria-label` to `label` text for a11y.\nmultiLine | boolean | n/a | false | Changes the input to a textarea.\npattern | string | n/a | false | Regex validation pattern. Useful for simple validation.\npatternError | string | n/a | false | Error message to be displayed when `pattern` validation fails.\nfeedback | boolean | n/a | false | Enables icon feedback as part of validation for valid, warn, and error states.\ntype | string | \"text\" | false | Input type. NOTE: This component is meant for text style inputs. Other input types (checkbox, radio) have their own components.\nrules | array | () => [] | false | Array of functions. Provide your own validation function(s). Takes the input string and outputs an object with a state and message. State is a String with value `valid`, `warning`, or `error`. Message is any String.\ndebounce | boolean,number | false | false | Boolean or Number. `true` has a default of 500ms. Providing a number will set debounce to that (in ms). `false` is no debounce.\n\nEvent Name | Type | Description\n--- | --- | ---\npaste | event | Fires when text is pasted into input.\nfocus | event | Fires when input gains focus.\nblur | event | Fires when input loses focus.\ninput | string | Current input value. Fires while typing.\nchange | string | New input value (if changed). Fires on blur.\n\nSlot | Description\n--- | ---\npreicon | Icon to be put in front of input\n",
			"version": "0.1.0"
		}
	]
}
